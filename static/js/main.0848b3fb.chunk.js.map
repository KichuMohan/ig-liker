{"version":3,"sources":["main.js","com/why.js","com/nav.js","App.js","serviceWorker.js","index.js"],"names":["main","state","tx","val","handleAdd","e","a","target","value","document","getElementById","innerHTML","setState","handleSubmit","alert","preventDefault","console","log","formData","FormData","append","Axios","post","then","res","catch","error","className","src","width","alt","onChange","type","id","maxlength","placeholder","class","min","max","this","onClick","Component","why","nav","to","App","path","component","Why","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"6SA8EeA,E,4MApEbC,MAAQ,CACNC,GAAI,GACJC,IAAM,I,EAGRC,U,uCAAY,WAAMC,GAAN,SAAAC,EAAA,6DACFD,EAAEE,OAAOC,MACjBC,SAASC,eAAe,QAAQC,UAAY,6BAA+BF,SAASC,eAAe,OAAOF,MAClGC,SAASC,eAAe,OAAOF,MAH7B,SAIF,EAAKI,SAAS,CAClBT,IAAKE,EAAEE,OAAOC,QALR,2C,wDAWZK,aAAe,SAAAR,GACb,GAAsB,GAAlB,EAAKJ,MAAME,IAEfW,MAAM,oBAEJ,CACFT,EAAEU,iBACFC,QAAQC,IAAI,EAAKhB,OACjB,IAAIiB,EAAW,IAAIC,SACnBD,EAASE,OAAO,KAAK,EAAKnB,MAAMC,IAChCgB,EAASE,OAAO,MAAM,EAAKnB,MAAME,KAEjCkB,IAAMC,KADM,oDACGJ,GACZK,MAAK,SAAAC,GAAG,OAAEV,MAAM,YAChBW,OAAM,SAAAC,GAAK,OAAEV,QAAQC,IAAIS,Q,uDAO7B,IAAD,OACA,OACE,yBAAKC,UAAU,OACd,yBAAKC,IAAI,WAAWD,UAAU,OAAOE,MAAM,MAC1C,4BAAQF,UAAU,cAChB,yBAAKC,IAAI,YAAYD,UAAU,WAAWG,IAAI,SAC9C,8CAIO,2BAAOC,SAAU,SAAA1B,GAAC,OAAI,EAAKO,SAAS,CAAEV,GAAIG,EAAEE,OAAOC,SAAUmB,UAAU,KAAKK,KAAK,OAAMC,GAAG,KAAKC,UAAU,KAAKC,YAAY,0BANnI,QASa,2BAAOC,MAAM,MAAb,KAAoB,2BAAQJ,KAAK,QAAQK,IAAI,IAAIC,IAAI,IAAIL,GAAG,MAAOF,SAAUQ,KAAKnC,YAAlF,KAGb,6BACI,uBAAG6B,GAAG,QAAN,+BAKK,2BAAON,UAAU,MAAMK,KAAK,SAASxB,MAAM,OAAOgC,QAASD,KAAK1B,qB,GA5D5D4B,aCkBJC,MAzBf,WACI,OACI,yBAAKf,UAAU,MACX,kDACA,6BACA,iIACA,+CACA,6BACA,6IACA,mEACA,6BACA,qQAGA,0EACA,6BACA,kL,OCAGgB,MAbf,WACI,OACI,6BACD,wBAAIhB,UAAU,YACV,kBAAC,IAAD,CAAMiB,GAAG,QAAO,4CAChB,kBAAC,IAAD,CAAMA,GAAG,SAAQ,wC,OCuBbC,MAzBf,WACA,OACE,kBAAC,IAAD,KACE,6BAEI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,OAAOC,UAAWC,IAC9B,yBAAKrB,UAAU,QACb,sCACA,yHACA,gCACD,uBAAGsB,KAAK,iCAAgC,yBAAKrB,IAAI,UAAUC,MAAM,aCRtDqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhD,SAASC,eAAe,SDyHpB,kBAAmBgD,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdrC,OAAM,SAAAC,GACLV,QAAQU,MAAMA,EAAMqC,c","file":"static/js/main.0848b3fb.chunk.js","sourcesContent":["import React ,{Component} from 'react';\r\nimport './App.css';\r\nimport Axios from 'axios';\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass main extends Component {\r\n  state = {\r\n    tx: \"\",\r\n    val : ''\r\n  };\r\n\r\n  handleAdd = async e =>{\r\n    var  cs=e.target.value;\r\n    document.getElementById('show').innerHTML = 'Number of like Selected:  ' + document.getElementById('val').value;\r\n      cs =  document.getElementById('val').value;\r\n      await this.setState({\r\n        val: e.target.value\r\n       \r\n      })\r\n\r\n  }\r\n  \r\n  handleSubmit = e =>{\r\n    if (this.state.val == 0)\r\n      {   \r\n    alert(\"Invalid Like\");\r\n     }\r\n  else{\r\n    e.preventDefault();\r\n    console.log(this.state);\r\n    let formData = new FormData();\r\n    formData.append('tx',this.state.tx);\r\n    formData.append('val',this.state.val);\r\n    const url = \"https://filmengineer.000webhostapp.com/insert.php\";\r\n    Axios.post(url,formData)\r\n      .then(res=>alert('Saved'))\r\n      .catch(error=>console.log(error));\r\n\r\n       }\r\n\r\n  }\r\n\r\n  render()\r\n  {\r\n  return (\r\n    <div className=\"App\">\r\n     <img src='head.png' className='head' width='1'/>\r\n      <header className=\"App-header\">\r\n        <img src='insta.png' className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n         Paste URL below\r\n        </p>\r\n\r\n               <input onChange={e => this.setState({ tx: e.target.value })} className=\"tt\" type='text'id='tx' maxlength=\"60\" placeholder='https://instagram.com'/>\r\n\r\n\r\n              Like <label class='lk'> 0<input  type=\"range\" min=\"0\" max=\"2\" id='val'  onChange={this.handleAdd}/>2</label>\r\n\r\n\r\n      <div>\r\n          <p id='show'>Number of like Selected: 0</p>\r\n       \r\n       </div>\r\n\r\n\r\n               <input className='but' type=\"submit\" value='Like' onClick={this.handleSubmit}/>\r\n\r\n\r\n      </header>\r\n    </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default main;\r\n","import React from 'react';\r\n\r\nfunction why(){\r\n    return(\r\n        <div className='wh'>\r\n            <h2>Why Only 2 Likes??</h2>\r\n            <hr/>\r\n            <p>This is the beta verison. The whole site and the backend funtionality are still under Development.</p>\r\n            <h2>How much time??</h2>\r\n            <hr/>\r\n            <p>Development team is currently engaged in many projects so the time taken to redem Like is between 1hr to 1 day</p>\r\n            <h2>Will My data is stored and shared??</h2>\r\n            <hr />\r\n            <p>We do not share any of your data with any one.We dont even log liked pages. We will not show any Advertisements.\r\n                But your data will be stored in our Database and will be deleted after 7 days and this is purely for backend program.\r\n            </p>\r\n            <h2>How is it different from other Autoliker??</h2>\r\n            <hr />\r\n            <p>We know we are not best in this segment but atleast we dont need your credential. Many Autoliker will ask you to\r\n                share your credential with them.\r\n            </p>\r\n            \r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default why;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\n\r\nfunction nav(){\r\n    return(\r\n        <nav>\r\n       <ul className='nav-link'>\r\n           <Link to=\"/why\"><li>Why 2 like?</li></Link>\r\n           <Link to=\"/home\"><li>Home</li></Link>\r\n            \r\n          \r\n       </ul>\r\n       </nav>\r\n    );\r\n}\r\n\r\nexport default nav;","import React from 'react';\nimport './App.css';\nimport Main from './main'\nimport Why from './com/why'\nimport Nav from './com/nav'\nimport {BrowserRouter as Router,Route} from 'react-router-dom';\n\n\nfunction App() {\nreturn(\n  <Router>\n    <div>\n      \n        <Main />\n        <Nav />\n        <Route path=\"/why\" component={Why} />\n        <div className='home'>\n          <h2>NOTE: </h2>\n          <p>Do not use paste same link twise this may lead to remove those like which was giver before</p>\n          <footer>\n         <a href='https://github.com/KichuMohan'><img src='git.png' width='30'/></a>\n         \n          </footer>\n\n        </div>\n        \n\n    </div>\n  </Router>\n);  \n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}